import csv
import glob, os
import tensorflow, numpy, math

block_size=1024 #여기에는 MDCT를 수행한 block 하나당 PCM sample 수가 ""아니라"", csv 파일에 저장된 block 하나 당 MDCT coeffcient 수를 적는다.
inv_block_size = 1 / block_size
sampling_rate=44100
unit_freqhz=sampling_rate * 0.5 * inv_block_size

coef_max_value=block_size*1.404296875
icoef=1/coef_max_value
epoch_length=0
learning_rate_calc=0.01
eval_checknum = 5
loss_per_epoch_train=[]
loss_per_epoch_eval=[]
node_in_coeff=[[]]
inblock=[]
outblock=[]
ieval=[]
oeval=[]

def freq_to_bark_traunmuller(freqhz):
    bark=26.81*freqhz/(1960+freqhz)-0.53
    if bark<2:
        bark=0.3+0.85*bark
    elif bark>20.1:
        bark=1.22*bark-4.422
    return bark

max_one_third_bark_scale=math.ceil(freq_to_bark_traunmuller(sampling_rate*0.5)*3)

def freq_to_one_third_octave(freqhz): #분포를 고려한 binary search로 속도를 끌어올린다.
    one_third_octave=[20, 25, 31.5, 40, 50, 63, 80, 100, 125,160,200, 250,315,400, 500, 630,800,1000,1250,1600,2000,2500,3150,4000,5000,6300,8000,10000,12500,16000,20000]
    oct_smaller=[27, 24, 22, 19,16,13,10,7,4,1,0]
    min_oct=0
    max_oct=len(one_third_octave)-1
    this_oct=oct_smaller[0]
    maxyes=False
    i=0
    if freqhz<20:
        return -1
    elif freqhz>=one_third_octave[this_oct]:
        if freqhz<one_third_octave[this_oct+3]:
            if freqhz>=one_third_octave[this_oct+1]:
                if freqhz<one_third_octave[this_oct+2]:
                    return this_oct+1
                else:
                    return this_oct+2
            else:
                return this_oct
        else:
            return this_oct+3
    while not(one_third_octave[this_oct]<=freqhz and one_third_octave[this_oct+1]>freqhz):
        if maxyes==False:
            if freqhz<=one_third_octave[oct_smaller[i+1]]:
                i+=1
            else:
                maxyes=True
            min_oct = oct_smaller[i + 1]
            max_oct = oct_smaller[i]
            this_oct = (max_oct + min_oct) >> 1
        else:
            if one_third_octave[this_oct]<=freqhz:
                min_oct=this_oct
            else:
                max_oct=this_oct
            this_oct=(max_oct + min_oct) >> 1
    return this_oct

def minimum_hearing_energy(freqhz): #ISO 13818-7의 psychoacoustic model에서, full scale sine wave는 83dB SPL.
    sound_pressure_octave_db=[88.0, 78.5, 68.7,59.5,51.1,44.0,37.5,31.5,26.5,22.1,17.9,14.4,11.4,8.6,6.2,4.4,3.0,2.2,2.4,3.5,1.7,-1.3,-4.2,-6.0,-5.4,-1.5,6.0,12.6,13.9,12.3,41.8,89.9,102.7]
    octaveband=freq_to_one_third_octave(freqhz)+1
    if sound_pressure_octave_db[octaveband]>sound_pressure_octave_db[octaveband+1]:
        more_weight=sound_pressure_octave_db[octaveband+1]
        less_weight=sound_pressure_octave_db[octaveband]
    else:
        more_weight=sound_pressure_octave_db[octaveband]
        less_weight=sound_pressure_octave_db[octaveband+1]
    sound_pressure_db=(more_weight*0.66+less_weight*0.34)
    return (coef_max_value**2)*pow(10,(sound_pressure_db-83)*0.1)

def freq_to_one_third_bark(freqhz):
    tempbark=freq_to_bark_traunmuller(freqhz)
    if tempbark<0:
        return 0
    else:
        tempbark*=3
        return math.floor(tempbark)

def spreading_function(bark1, bark2): #From ISO 13818-7
    if bark2>=bark1:
        tempx=3.0*(bark2-bark1)
    else:
        tempx=1.5*(bark2-bark1)
    temp=(tempx-0.5)**2-2*(tempx-0.5)
    if temp<0:
        tempz=8*temp
    else:
        tempz=0
    tempy=15.811389+7.5*(tempx+0.474)-17.5*math.sqrt(1.0+(tempx+0.474)**2)
    if tempy<-100:
        return 0
    else:
        return pow(10,(tempy+tempz)*0.1)

def spreading_function_table(bark1,bark2):
    table=[[0.9999999875118892, 0.09322613026315713, 0.014683676580807119, 0.007249027806858707, 0.0008202532837154919, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461016e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.6472134052367532, 0.9999999875118892, 0.09322613026315713, 0.014683676580807119, 0.007249027806858707, 0.0008202532837154919, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461016e-08, 1.0563025224152617e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.16192442911988414, 0.6472134052367532, 0.9999999875118892, 0.09322613026315713, 0.014683676580807119, 0.007249027806858707, 0.0008202532837154919, 8.883911558999276e-05, 9.392466398563599e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461016e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.020155120676219142, 0.16192442911988414, 0.6472134052367532, 0.9999999875118892, 0.09322613026315713, 0.014683676580807119, 0.007249027806858707, 0.0008202532837154919, 8.883911558999295e-05, 9.392466398563619e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461016e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.001753167992144666, 0.020155120676219142, 0.16192442911988414, 0.6472134052367532, 0.9999999875118892, 0.09322613026315707, 0.014683676580807119, 0.007249027806858693, 0.0008202532837154919, 8.883911558999295e-05, 9.392466398563619e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461016e-08, 1.0563025224152617e-09, 1.0740485287572227e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.00012816551875821837, 0.001753167992144666, 0.020155120676219142, 0.16192442911988414, 0.6472134052367535, 0.9999999875118892, 0.09322613026315697, 0.014683676580807088, 0.007249027806858693, 0.0008202532837154919, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461016e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8.557443582803154e-06, 0.00012816551875821837, 0.001753167992144666, 0.020155120676219142, 0.16192442911988414, 0.6472134052367532, 0.9999999875118892, 0.09322613026315697, 0.014683676580807119, 0.007249027806858707, 0.0008202532837154919, 8.883911558999276e-05, 9.392466398563599e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5.42587055990719e-07, 8.557443582803154e-06, 0.00012816551875821771, 0.001753167992144666, 0.0201551206762191, 0.1619244291198839, 0.6472134052367532, 0.9999999875118892, 0.09322613026315707, 0.014683676580807103, 0.007249027806858715, 0.0008202532837154919, 8.883911558999295e-05, 9.392466398563619e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461016e-08, 1.0563025224152617e-09, 1.0740485287572227e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3.332585683575313e-08, 5.42587055990719e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.001753167992144666, 0.0201551206762191, 0.16192442911988414, 0.6472134052367535, 0.9999999875118892, 0.09322613026315707, 0.014683676580807103, 0.007249027806858693, 0.0008202532837154919, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461016e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2.0047226356499426e-09, 3.332585683575313e-08, 5.42587055990719e-07, 8.55744358280319e-06, 0.00012816551875821837, 0.001753167992144666, 0.020155120676219142, 0.16192442911988436, 0.6472134052367535, 0.9999999875118892, 0.09322613026315707, 0.014683676580807088, 0.007249027806858693, 0.0008202532837154919, 8.883911558999258e-05, 9.392466398563619e-06, 9.785561745345158e-07, 1.0098083618998738e-07, 1.0352298334461016e-08, 1.0563025224152617e-09, 1.0740485287572227e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1.1888172722885518e-10, 2.0047226356499426e-09, 3.332585683575313e-08, 5.42587055990719e-07, 8.55744358280319e-06, 0.00012816551875821837, 0.001753167992144666, 0.02015512067621917, 0.16192442911988436, 0.6472134052367535, 0.9999999875118892, 0.0932261302631567, 0.014683676580807088, 0.007249027806858693, 0.0008202532837154919, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.0098083618998779e-07, 1.0352298334461016e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1.188817272288547e-10, 2.0047226356499426e-09, 3.332585683575313e-08, 5.42587055990719e-07, 8.557443582803154e-06, 0.00012816551875821771, 0.001753167992144666, 0.0201551206762191, 0.1619244291198839, 0.6472134052367527, 0.9999999875118892, 0.09322613026315707, 0.014683676580807103, 0.007249027806858693, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1.1888172722885518e-10, 2.0047226356499426e-09, 3.332585683575313e-08, 5.42587055990719e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.001753167992144666, 0.0201551206762191, 0.1619244291198839, 0.6472134052367535, 0.9999999875118892, 0.09322613026315707, 0.014683676580807088, 0.007249027806858715, 0.0008202532837154919, 8.883911558999258e-05, 9.392466398563619e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461016e-08, 1.0563025224152617e-09, 1.0740485287572227e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1.1888172722885518e-10, 2.0047226356499426e-09, 3.332585683575313e-08, 5.42587055990719e-07, 8.55744358280319e-06, 0.00012816551875821837, 0.001753167992144666, 0.0201551206762191, 0.16192442911988436, 0.6472134052367535, 0.9999999875118892, 0.0932261302631567, 0.014683676580807103, 0.007249027806858693, 0.0008202532837154919, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461016e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1.188817272288547e-10, 2.0047226356499426e-09, 3.332585683575313e-08, 5.42587055990719e-07, 8.557443582803154e-06, 0.00012816551875821771, 0.0017531679921446589, 0.0201551206762191, 0.1619244291198839, 0.6472134052367527, 0.9999999875118892, 0.0932261302631576, 0.014683676580807103, 0.007249027806858693, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563656e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572227e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575347e-08, 5.42587055990719e-07, 8.55744358280319e-06, 0.00012816551875821837, 0.0017531679921446697, 0.02015512067621917, 0.16192442911988436, 0.6472134052367549, 0.9999999875118892, 0.0932261302631567, 0.014683676580807081, 0.007249027806858693, 0.0008202532837154919, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.0098083618998779e-07, 1.0352298334461016e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499426e-09, 3.332585683575313e-08, 5.42587055990719e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.001753167992144666, 0.0201551206762191, 0.16192442911988436, 0.6472134052367527, 0.9999999875118892, 0.0932261302631567, 0.014683676580807103, 0.007249027806858693, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1.188817272288547e-10, 2.0047226356499426e-09, 3.332585683575313e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.00012816551875821771, 0.0017531679921446589, 0.0201551206762191, 0.1619244291198836, 0.6472134052367527, 0.9999999875118892, 0.0932261302631576, 0.014683676580807103, 0.00724902780685873, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563656e-06, 9.785561745345158e-07, 1.00980836189988e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499426e-09, 3.332585683575313e-08, 5.42587055990719e-07, 8.55744358280319e-06, 0.00012816551875821837, 0.0017531679921446697, 0.0201551206762191, 0.16192442911988436, 0.6472134052367549, 0.9999999875118892, 0.0932261302631567, 0.014683676580807103, 0.007249027806858693, 0.0008202532837154919, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461016e-08, 1.0563025224152576e-09, 1.0740485287572051e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1.188817272288547e-10, 2.0047226356499426e-09, 3.332585683575313e-08, 5.42587055990719e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446589, 0.0201551206762191, 0.16192442911988436, 0.6472134052367527, 0.9999999875118892, 0.0932261302631576, 0.014683676580807103, 0.007249027806858693, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563656e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461016e-08, 1.0563025224152576e-09, 1.0740485287572227e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575347e-08, 5.42587055990719e-07, 8.55744358280319e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219253, 0.16192442911988436, 0.6472134052367549, 0.9999999875118892, 0.0932261302631567, 0.014683676580807081, 0.007249027806858693, 0.0008202532837154919, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.0098083618998779e-07, 1.0352298334460931e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499426e-09, 3.332585683575313e-08, 5.42587055990719e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446697, 0.0201551206762191, 0.16192442911988436, 0.6472134052367527, 0.9999999875118892, 0.0932261302631567, 0.014683676580807103, 0.007249027806858693, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.0098083618998779e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.188817272288547e-10, 2.0047226356499426e-09, 3.332585683575313e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446589, 0.0201551206762191, 0.1619244291198836, 0.6472134052367527, 0.9999999875118892, 0.0932261302631576, 0.014683676580807103, 0.00724902780685873, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.00980836189988e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575313e-08, 5.42587055990719e-07, 8.55744358280319e-06, 0.00012816551875821837, 0.0017531679921446697, 0.0201551206762191, 0.16192442911988436, 0.6472134052367549, 0.9999999875118892, 0.0932261302631567, 0.014683676580807103, 0.007249027806858693, 0.0008202532837154919, 8.883911558999258e-05, 9.392466398563541e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461016e-08, 1.0563025224152576e-09, 1.0740485287572051e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499426e-09, 3.332585683575313e-08, 5.42587055990719e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446589, 0.0201551206762191, 0.16192442911988436, 0.6472134052367527, 0.9999999875118892, 0.0932261302631576, 0.014683676580807103, 0.007249027806858693, 0.0008202532837154919, 8.883911558999258e-05, 9.392466398563656e-06, 9.785561745345158e-07, 1.0098083618998779e-07, 1.0352298334461016e-08, 1.0563025224152576e-09, 1.0740485287572227e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575361e-08, 5.42587055990719e-07, 8.55744358280319e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219253, 0.16192442911988436, 0.6472134052367549, 0.9999999875118892, 0.0932261302631567, 0.014683676580807081, 0.007249027806858648, 0.0008202532837154878, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.0098083618998779e-07, 1.0352298334460931e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575313e-08, 5.42587055990719e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446697, 0.0201551206762191, 0.16192442911988436, 0.6472134052367527, 0.9999999875118892, 0.0932261302631567, 0.014683676580807081, 0.007249027806858648, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.0098083618998779e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499426e-09, 3.332585683575313e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446589, 0.0201551206762191, 0.1619244291198836, 0.6472134052367527, 0.9999999875118892, 0.0932261302631567, 0.014683676580807081, 0.00724902780685873, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.00980836189988e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.188817272288542e-10, 2.0047226356499426e-09, 3.3325856835753066e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.00012816551875821704, 0.0017531679921446589, 0.020155120676219006, 0.1619244291198836, 0.6472134052367527, 0.9999999875118892, 0.0932261302631567, 0.014683676580807126, 0.00724902780685873, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345257e-07, 1.00980836189988e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.188817272288542e-10, 2.0047226356499182e-09, 3.3325856835753066e-08, 5.425870559907168e-07, 8.557443582803049e-06, 0.00012816551875821704, 0.001753167992144648, 0.020155120676219006, 0.1619244291198836, 0.6472134052367527, 0.9999999875118892, 0.09322613026315846, 0.014683676580807126, 0.00724902780685873, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563714e-06, 9.785561745345257e-07, 1.00980836189988e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572271e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575361e-08, 5.42587055990719e-07, 8.55744358280319e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219253, 0.16192442911988503, 0.6472134052367564, 0.9999999875118892, 0.0932261302631567, 0.014683676580807081, 0.007249027806858648, 0.0008202532837154878, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.0098083618998779e-07, 1.0352298334460931e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575313e-08, 5.42587055990719e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219253, 0.16192442911988503, 0.6472134052367527, 0.9999999875118892, 0.0932261302631567, 0.014683676580807081, 0.007249027806858648, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.0098083618998779e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499426e-09, 3.332585683575313e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219253, 0.1619244291198836, 0.6472134052367527, 0.9999999875118892, 0.0932261302631567, 0.014683676580807081, 0.00724902780685873, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.00980836189988e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.188817272288542e-10, 2.0047226356499426e-09, 3.3325856835753066e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219006, 0.1619244291198836, 0.6472134052367527, 0.9999999875118892, 0.0932261302631567, 0.014683676580807126, 0.00724902780685873, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345257e-07, 1.00980836189988e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.188817272288542e-10, 2.0047226356499182e-09, 3.3325856835753066e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.001753167992144648, 0.020155120676219006, 0.1619244291198836, 0.6472134052367527, 0.9999999875118892, 0.09322613026315846, 0.014683676580807126, 0.00724902780685873, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563714e-06, 9.785561745345257e-07, 1.00980836189988e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575361e-08, 5.425870559907245e-07, 8.557443582803259e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219253, 0.16192442911988503, 0.6472134052367564, 0.9999999875118892, 0.0932261302631567, 0.014683676580807081, 0.007249027806858648, 0.0008202532837154878, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.0098083618998779e-07, 1.0352298334460931e-08, 1.0563025224152533e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575361e-08, 5.425870559907245e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219253, 0.16192442911988503, 0.6472134052367527, 0.9999999875118892, 0.0932261302631567, 0.014683676580807081, 0.007249027806858648, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.0098083618998779e-07, 1.0352298334460931e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575361e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219253, 0.1619244291198836, 0.6472134052367527, 0.9999999875118892, 0.0932261302631567, 0.014683676580807081, 0.00724902780685873, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.0098083618998779e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.3325856835753066e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219006, 0.1619244291198836, 0.6472134052367527, 0.9999999875118892, 0.0932261302631567, 0.014683676580807126, 0.00724902780685873, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.00980836189988e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499182e-09, 3.3325856835753066e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.001753167992144648, 0.020155120676219006, 0.1619244291198836, 0.6472134052367527, 0.9999999875118892, 0.09322613026315846, 0.014683676580807126, 0.00724902780685873, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345257e-07, 1.00980836189988e-07, 1.0352298334461037e-08, 1.056302522415266e-09, 1.0740485287572271e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575361e-08, 5.425870559907245e-07, 8.557443582803259e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219253, 0.16192442911988503, 0.6472134052367564, 0.9999999875118892, 0.0932261302631567, 0.014683676580807081, 0.007249027806858648, 0.0008202532837154878, 8.883911558999239e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.0098083618998779e-07, 1.0352298334460931e-08, 1.056302522415266e-09, 1.0740485287572051e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575361e-08, 5.425870559907245e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219253, 0.16192442911988503, 0.6472134052367527, 0.9999999875118892, 0.0932261302631567, 0.014683676580807081, 0.007249027806858648, 0.0008202532837154878, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.0098083618998779e-07, 1.0352298334461037e-08, 1.0563025224152533e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575361e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219253, 0.1619244291198836, 0.6472134052367527, 0.9999999875118892, 0.0932261302631567, 0.014683676580807081, 0.007249027806858648, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345137e-07, 1.00980836189988e-07, 1.0352298334460931e-08, 1.056302522415266e-09, 1.0740485287572051e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.3325856835753066e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219006, 0.1619244291198836, 0.6472134052367527, 0.9999999875118892, 0.0932261302631567, 0.014683676580807081, 0.00724902780685873, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563599e-06, 9.785561745345257e-07, 1.0098083618998779e-07, 1.0352298334461037e-08, 1.0563025224152533e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499182e-09, 3.3325856835753066e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.001753167992144648, 0.020155120676219006, 0.1619244291198836, 0.6472134052367527, 0.9999999875118892, 0.0932261302631567, 0.014683676580807126, 0.00724902780685873, 0.0008202532837154953, 8.883911558999295e-05, 9.392466398563714e-06, 9.785561745345137e-07, 1.00980836189988e-07, 1.0352298334460931e-08, 1.056302522415266e-09, 1.0740485287572271e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885374e-10, 2.0047226356499182e-09, 3.3325856835753066e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.0001281655187582164, 0.001753167992144648, 0.020155120676219006, 0.1619244291198836, 0.6472134052367527, 0.9999999875118892, 0.09322613026315846, 0.014683676580807126, 0.00724902780685873, 0.0008202532837154953, 8.883911558999422e-05, 9.392466398563599e-06, 9.785561745345257e-07, 1.0098083618998779e-07, 1.0352298334461037e-08, 1.0563025224152834e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575361e-08, 5.425870559907245e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219253, 0.16192442911988503, 0.6472134052367564, 0.9999999875118892, 0.0932261302631567, 0.014683676580807081, 0.007249027806858648, 0.0008202532837154953, 8.883911558999239e-05, 9.392466398563599e-06, 9.785561745345037e-07, 1.0098083618998779e-07, 1.0352298334461037e-08, 1.0563025224152533e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575361e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219253, 0.16192442911988503, 0.6472134052367527, 0.9999999875118892, 0.0932261302631567, 0.014683676580807081, 0.00724902780685873, 0.0008202532837154878, 8.883911558999295e-05, 9.392466398563502e-06, 9.785561745345137e-07, 1.00980836189988e-07, 1.0352298334460931e-08, 1.056302522415266e-09, 1.0740485287572051e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.3325856835753066e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219253, 0.1619244291198836, 0.6472134052367527, 0.9999999875118892, 0.0932261302631567, 0.014683676580807126, 0.007249027806858648, 0.0008202532837154953, 8.883911558999239e-05, 9.392466398563599e-06, 9.785561745345257e-07, 1.0098083618998779e-07, 1.0352298334461037e-08, 1.0563025224152533e-09, 1.0740485287572183e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499182e-09, 3.3325856835753066e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219006, 0.1619244291198836, 0.6472134052367527, 0.9999999875118892, 0.09322613026315846, 0.014683676580807081, 0.00724902780685873, 0.0008202532837154878, 8.883911558999295e-05, 9.392466398563714e-06, 9.785561745345137e-07, 1.00980836189988e-07, 1.0352298334460931e-08, 1.056302522415266e-09, 1.0740485287572271e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575361e-08, 5.425870559907245e-07, 8.557443582803259e-06, 0.00012816551875822018, 0.0017531679921446697, 0.020155120676219253, 0.16192442911988503, 0.6472134052367564, 0.9999999875118892, 0.09322613026315503, 0.014683676580807081, 0.007249027806858567, 0.0008202532837154878, 8.883911558999295e-05, 9.392466398563502e-06, 9.785561745345137e-07, 1.0098083618998676e-07, 1.0352298334460931e-08, 1.056302522415266e-09, 1.0740485287572051e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885374e-10, 2.0047226356499182e-09, 3.3325856835753066e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.0001281655187582164, 0.001753167992144648, 0.020155120676219006, 0.1619244291198836, 0.6472134052367498, 0.9999999875118892, 0.09322613026315846, 0.014683676580807081, 0.00724902780685873, 0.0008202532837155054, 8.883911558999295e-05, 9.392466398563714e-06, 9.785561745345137e-07, 1.00980836189988e-07, 1.0352298334461206e-08, 1.056302522415266e-09, 1.0740485287572271e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575361e-08, 5.425870559907245e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.0017531679921446697, 0.020155120676219253, 0.1619244291198836, 0.6472134052367564, 0.9999999875118892, 0.09322613026315503, 0.014683676580807081, 0.00724902780685873, 0.0008202532837154878, 8.883911558999295e-05, 9.392466398563502e-06, 9.785561745345137e-07, 1.00980836189988e-07, 1.0352298334460931e-08, 1.056302522415266e-09, 1.0740485287572051e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885374e-10, 2.0047226356499182e-09, 3.3325856835753066e-08, 5.42587055990709e-07, 8.557443582803015e-06, 0.0001281655187582164, 0.001753167992144648, 0.02015512067621874, 0.1619244291198836, 0.6472134052367498, 0.9999999875118892, 0.09322613026315846, 0.014683676580807126, 0.00724902780685873, 0.0008202532837155054, 8.883911558999295e-05, 9.392466398563714e-06, 9.785561745345357e-07, 1.00980836189988e-07, 1.0352298334461206e-08, 1.056302522415266e-09, 1.0740485287572271e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.3325856835753066e-08, 5.425870559907168e-07, 8.557443582803154e-06, 0.00012816551875821837, 0.001753167992144648, 0.020155120676219253, 0.1619244291198836, 0.6472134052367564, 0.9999999875118892, 0.09322613026315846, 0.014683676580807081, 0.00724902780685873, 0.0008202532837154878, 8.883911558999295e-05, 9.392466398563714e-06, 9.785561745345137e-07, 1.00980836189988e-07, 1.0352298334460931e-08, 1.056302522415266e-09, 1.0740485287572271e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885712e-10, 2.004722635649951e-09, 3.332585683575361e-08, 5.425870559907245e-07, 8.557443582803259e-06, 0.00012816551875821837, 0.0017531679921446947, 0.020155120676219253, 0.16192442911988666, 0.6472134052367564, 0.9999999875118892, 0.09322613026315503, 0.014683676580807081, 0.007249027806858567, 0.0008202532837154878, 8.883911558999295e-05, 9.392466398563502e-06, 9.785561745345137e-07, 1.0098083618998676e-07, 1.0352298334460931e-08, 1.056302522415266e-09, 1.0740485287572051e-10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885374e-10, 2.0047226356499182e-09, 3.3325856835753066e-08, 5.425870559907168e-07, 8.557443582803015e-06, 0.00012816551875821837, 0.001753167992144648, 0.020155120676219253, 0.1619244291198836, 0.6472134052367498, 0.9999999875118892, 0.09322613026315846, 0.014683676580807081, 0.00724902780685873, 0.0008202532837155054, 8.883911558999295e-05, 9.392466398563714e-06, 9.785561745345137e-07, 1.00980836189988e-07, 1.0352298334461206e-08, 1.056302522415266e-09, 1.0740485287572271e-10, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.004722635649951e-09, 3.332585683575361e-08, 5.425870559907168e-07, 8.557443582803259e-06, 0.00012816551875821837, 0.0017531679921446947, 0.020155120676219253, 0.1619244291198836, 0.6472134052367564, 0.9999999875118892, 0.09322613026315503, 0.014683676580807081, 0.00724902780685873, 0.0008202532837154878, 8.883911558999295e-05, 9.392466398563502e-06, 9.785561745345137e-07, 1.00980836189988e-07, 1.0352298334460931e-08, 1.056302522415266e-09, 1.0740485287572051e-10, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885374e-10, 2.0047226356499182e-09, 3.332585683575258e-08, 5.425870559907168e-07, 8.557443582803015e-06, 0.00012816551875821837, 0.001753167992144648, 0.02015512067621874, 0.1619244291198836, 0.6472134052367498, 0.9999999875118892, 0.09322613026315846, 0.014683676580807126, 0.00724902780685873, 0.0008202532837155054, 8.883911558999295e-05, 9.392466398563714e-06, 9.785561745345357e-07, 1.00980836189988e-07, 1.0352298334461206e-08, 1.056302522415266e-09, 1.0740485287572271e-10, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499182e-09, 3.332585683575361e-08, 5.425870559907168e-07, 8.557443582803259e-06, 0.00012816551875821837, 0.001753167992144648, 0.020155120676219253, 0.1619244291198836, 0.6472134052367564, 0.9999999875118892, 0.09322613026315846, 0.014683676580807081, 0.00724902780685873, 0.0008202532837154878, 8.883911558999295e-05, 9.392466398563714e-06, 9.785561745345137e-07, 1.00980836189988e-07, 1.0352298334460931e-08, 1.056302522415266e-09, 1.0740485287572271e-10, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499753e-09, 3.332585683575361e-08, 5.425870559907334e-07, 8.557443582803259e-06, 0.00012816551875821837, 0.0017531679921446947, 0.020155120676219253, 0.16192442911988666, 0.6472134052367564, 0.9999999875118892, 0.09322613026315503, 0.014683676580807081, 0.007249027806858567, 0.0008202532837154878, 8.883911558999295e-05, 9.392466398563502e-06, 9.785561745345137e-07, 1.0098083618998676e-07, 1.0352298334460931e-08, 1.056302522415266e-09, 1.0740485287572051e-10, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499182e-09, 3.332585683575361e-08, 5.425870559907168e-07, 8.557443582803015e-06, 0.00012816551875821837, 0.001753167992144648, 0.020155120676219253, 0.1619244291198836, 0.6472134052367498, 0.9999999875118892, 0.09322613026315846, 0.014683676580807081, 0.00724902780685873, 0.0008202532837155054, 8.883911558999295e-05, 9.392466398563714e-06, 9.785561745345137e-07, 1.00980836189988e-07, 1.0352298334461206e-08, 1.056302522415266e-09, 1.0740485287572271e-10, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499753e-09, 3.332585683575361e-08, 5.425870559907168e-07, 8.557443582803259e-06, 0.00012816551875821837, 0.0017531679921446947, 0.020155120676219253, 0.1619244291198836, 0.6472134052367564, 0.9999999875118892, 0.09322613026315503, 0.014683676580807081, 0.00724902780685873, 0.0008202532837154878, 8.883911558999295e-05, 9.392466398563502e-06, 9.785561745345137e-07, 1.00980836189988e-07, 1.0352298334460931e-08, 1.056302522415266e-09, 1.0740485287572051e-10, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499182e-09, 3.332585683575258e-08, 5.425870559907168e-07, 8.557443582803015e-06, 0.00012816551875821837, 0.001753167992144648, 0.02015512067621874, 0.1619244291198836, 0.6472134052367498, 0.9999999875118892, 0.09322613026315846, 0.014683676580807126, 0.00724902780685873, 0.0008202532837155054, 8.883911558999295e-05, 9.392466398563714e-06, 9.785561745345357e-07, 1.00980836189988e-07, 1.0352298334461206e-08, 1.056302522415266e-09, 1.0740485287572271e-10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499182e-09, 3.332585683575361e-08, 5.425870559907168e-07, 8.557443582803259e-06, 0.00012816551875821837, 0.001753167992144648, 0.020155120676219253, 0.1619244291198836, 0.6472134052367564, 0.9999999875118892, 0.09322613026315846, 0.014683676580807081, 0.00724902780685873, 0.0008202532837154878, 8.883911558999295e-05, 9.392466398563714e-06, 9.785561745345137e-07, 1.00980836189988e-07, 1.0352298334460931e-08, 1.056302522415266e-09], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499753e-09, 3.332585683575361e-08, 5.425870559907334e-07, 8.557443582803259e-06, 0.00012816551875821837, 0.0017531679921446947, 0.020155120676219253, 0.16192442911988666, 0.6472134052367564, 0.9999999875118892, 0.09322613026315503, 0.014683676580807081, 0.007249027806858567, 0.0008202532837154878, 8.883911558999295e-05, 9.392466398563502e-06, 9.785561745345137e-07, 1.0098083618998676e-07, 1.0352298334460931e-08], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499182e-09, 3.332585683575361e-08, 5.425870559907168e-07, 8.557443582803015e-06, 0.00012816551875821837, 0.001753167992144648, 0.020155120676219253, 0.1619244291198836, 0.6472134052367498, 0.9999999875118892, 0.09322613026315846, 0.014683676580807081, 0.00724902780685873, 0.0008202532837155054, 8.883911558999295e-05, 9.392466398563714e-06, 9.785561745345137e-07, 1.00980836189988e-07], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499753e-09, 3.332585683575361e-08, 5.425870559907168e-07, 8.557443582803259e-06, 0.00012816551875821837, 0.0017531679921446947, 0.020155120676219253, 0.1619244291198836, 0.6472134052367564, 0.9999999875118892, 0.09322613026315503, 0.014683676580807081, 0.00724902780685873, 0.0008202532837154878, 8.883911558999295e-05, 9.392466398563502e-06, 9.785561745345137e-07], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499182e-09, 3.332585683575258e-08, 5.425870559907168e-07, 8.557443582803015e-06, 0.00012816551875821837, 0.001753167992144648, 0.02015512067621874, 0.1619244291198836, 0.6472134052367498, 0.9999999875118892, 0.09322613026315846, 0.014683676580807126, 0.00724902780685873, 0.0008202532837155054, 8.883911558999295e-05, 9.392466398563714e-06], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499182e-09, 3.332585683575361e-08, 5.425870559907168e-07, 8.557443582803259e-06, 0.00012816551875821837, 0.001753167992144648, 0.020155120676219253, 0.1619244291198836, 0.6472134052367564, 0.9999999875118892, 0.09322613026315846, 0.014683676580807081, 0.00724902780685873, 0.0008202532837154878, 8.883911558999295e-05], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499753e-09, 3.332585683575361e-08, 5.425870559907334e-07, 8.557443582803259e-06, 0.00012816551875821837, 0.0017531679921446947, 0.020155120676219253, 0.16192442911988666, 0.6472134052367564, 0.9999999875118892, 0.09322613026315503, 0.014683676580807081, 0.007249027806858567, 0.0008202532837154878], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499182e-09, 3.332585683575361e-08, 5.425870559907168e-07, 8.557443582803015e-06, 0.00012816551875821837, 0.001753167992144648, 0.020155120676219253, 0.1619244291198836, 0.6472134052367498, 0.9999999875118892, 0.09322613026315846, 0.014683676580807081, 0.00724902780685873], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499753e-09, 3.332585683575361e-08, 5.425870559907168e-07, 8.557443582803259e-06, 0.00012816551875821837, 0.0017531679921446947, 0.020155120676219253, 0.1619244291198836, 0.6472134052367564, 0.9999999875118892, 0.09322613026315503, 0.014683676580807081], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499182e-09, 3.332585683575258e-08, 5.425870559907168e-07, 8.557443582803015e-06, 0.00012816551875821837, 0.001753167992144648, 0.02015512067621874, 0.1619244291198836, 0.6472134052367498, 0.9999999875118892, 0.09322613026315846], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.1888172722885518e-10, 2.0047226356499182e-09, 3.332585683575361e-08, 5.425870559907168e-07, 8.557443582803259e-06, 0.00012816551875821837, 0.001753167992144648, 0.020155120676219253, 0.1619244291198836, 0.6472134052367564, 0.9999999875118892]]
    return table[bark1][bark2]


def tonality_calc(freq_coef): #From TsungHan Tsai, 2004 and James D. Johnston, 1988
    #각 freq_coef가 속한 critical band마다 tonality index를 구하는 것으로 해석
    arithmetic_mean_db=0
    geometric_mean_db=0
    tonality=[]
    current_bark_floor=0
    bark_coef_count=0
    for i in range(0,block_size):
        this_bark_floor=freq_to_one_third_bark((i+0.5)*unit_freqhz)
        if this_bark_floor>current_bark_floor and i!=block_size-1:
            geometric_mean_db /= bark_coef_count
            arithmetic_mean_db = math.log10(arithmetic_mean_db) - math.log10(bark_coef_count)
            tonality.append((geometric_mean_db - arithmetic_mean_db) * (-0.16666667))
            if tonality[current_bark_floor]>1:
                tonality[current_bark_floor]=1
            bark_coef_count = 0
            current_bark_floor=this_bark_floor
            geometric_mean_db=0
            arithmetic_mean_db=0
        if freq_coef[i]==0:
            geometric_mean_db -= 400
        else:
            geometric_mean_db+=math.log10(freq_coef[i]**2)
            arithmetic_mean_db += (freq_coef[i]**2)
        if i==block_size-1:
            geometric_mean_db /= bark_coef_count
            arithmetic_mean_db = math.log10(arithmetic_mean_db) - math.log10(bark_coef_count)
            tonality.append((geometric_mean_db - arithmetic_mean_db) * (-0.16666667))
        bark_coef_count+=1
    return tonality

def one_third_bark_to_freq(one_third_bark):
    one_third_bark*=0.33333333
    if one_third_bark<2:
        one_third_bark=(one_third_bark-0.3)/0.85
    elif one_third_bark>20.1:
        one_third_bark = (one_third_bark +4.422) / 1.22
    return 1960*(one_third_bark+0.53)/(26.28-one_third_bark)

def calc_masking_threshold(freq_coef_power):
    crit_band_power = []
    crit_band_power_with_sfm = []
    tonality=0
    for i in range(0,max_one_third_bark_scale):
        crit_band_power.append(0)
        crit_band_power_with_sfm.append(0)
    for i in range(0, block_size):
        crit_band_power[freq_to_one_third_bark((i+0.5)*unit_freqhz)]+=freq_coef_power[i]
    for i in range(0,max_one_third_bark_scale):
        normalizer=0
        for j in range(0,max_one_third_bark_scale):
            crit_band_power_with_sfm[i]+=crit_band_power[i]*spreading_function(i*0.33333333,j*0.33333333)
            normalizer+=spreading_function(i*0.33333333,j*0.33333333)
        crit_band_power_with_sfm[i]/=normalizer
    tonality=tonality_calc(freq_coef_power)
    crit_band_power=[]
    actual_energy_threshold=[]
    for i in range(0, max_one_third_bark_scale):
        actual_energy_threshold.append(crit_band_power_with_sfm[i]*math.pow(10,-1.2*tonality[i]-0.6))
    masking_threshold = []
    mht=0
    for i in range(0,block_size):
        masking_threshold.append(actual_energy_threshold[freq_to_one_third_bark((i+0.5)*unit_freqhz)])
        mht=minimum_hearing_energy((i+0.5)*unit_freqhz)
        if masking_threshold[i]<mht:
            masking_threshold[i]=mht
    return masking_threshold

def pam_weighted_mse(y_true,y_pred): #inputs are tensorflow tensors, output should be tensorflow scalar.
    isright = 0
    masking_threshold_real=[]
    masking_threshold_pred=[]
    detectable_real=[]
    detectable_pred=[]
    temp_threshold=[]
    learning_weight=[]
    temptrue=y_true.numpy().tolist()
    temppred=y_pred.numpy().tolist()
    for singletrue in temptrue:
        isright = 0
        freq_coef_power = []
        for singlecoef in singletrue:
            # coef_max_value는 neural network 과정의 normalized value를 다시 원상복귀시키는 역할
            freq_coef_power.append((coef_max_value*singlecoef)**2)
        while isright < block_size * 2:
            if isright==0:
                temp_threshold=calc_masking_threshold(freq_coef_power[isright:isright+block_size])
            else:
                temp_threshold=temp_threshold+calc_masking_threshold(freq_coef_power[isright:isright+block_size])
            isright = isright + block_size
        masking_threshold_real.append(temp_threshold)
        temp_threshold=[]
    for i in range(0,len(masking_threshold_real)):
        temp_hear = []
        for j in range(0,len(masking_threshold_real[i])):
            if masking_threshold_real[i][j]>=(coef_max_value*temptrue[i][j])**2:
                temp_hear.append(True)
            else:
                temp_hear.append(False)
        detectable_real.append(temp_hear)

    for singlepred in temppred:
        isright = 0
        freq_coef_power = []
        for singlecoef in singlepred:
            # coef_max_value는 neural network 과정의 normalized value를 다시 원상복귀시키는 역할
            freq_coef_power.append((coef_max_value * singlecoef) ** 2)
        while isright < block_size * 2:
            if isright == 0:
                temp_threshold = calc_masking_threshold(freq_coef_power[isright:isright + block_size])
            else:
                temp_threshold=temp_threshold+calc_masking_threshold(freq_coef_power[isright:isright + block_size])
            isright = isright + block_size
        masking_threshold_pred.append(temp_threshold)
        temp_threshold = []
    for i in range(0, len(masking_threshold_pred)):
        temp_hear = []
        for j in range(0, len(masking_threshold_pred[i])):
            if masking_threshold_pred[i][j] >= (coef_max_value * temppred[i][j]) ** 2:
                temp_hear.append(True)
            else:
                temp_hear.append(False)
        detectable_pred.append(temp_hear)
    audible_coef=[]
    total_weighted_rms=[]
    for i in range(0,len(detectable_real)):
        temp_weight=[]
        for j in range(0,len(detectable_real[i])):
            if (not detectable_real[i][j]) and (detectable_real[i][j] and detectable_pred[i][j]):
                temp_weight.append(False)
            else:
                temp_weight.append(True)
        audible_coef.append(temp_weight)
        unweighted_rms=0
        weighted_rms=0
        for j in range(0,len(detectable_real[i])):
            temp_singlerms = 0
            temp_singlerms=(y_true[i][j]-y_pred[i][j])**2
            unweighted_rms+=temp_singlerms
            if audible_coef:
                weighted_rms+=2*temp_singlerms
            else:
                weighted_rms+=0.5*temp_singlerms
        weighted_rms*=(inv_block_size*0.5)

        total_weighted_rms.append(weighted_rms)
    return tensorflow.convert_to_tensor(total_weighted_rms)
    # squared_difference = tensorflow.square(y_true - y_pred)
    # return tensorflow.reduce_mean(squared_difference, axis=-1)

class LossHistory(tensorflow.keras.callbacks.Callback):
    def on_batch_begin(self, batch, logs={}):
        self.loss=0
    def on_batch_end(self, batch, logs={}):
        self.loss+=logs.get('loss')

files_train=os.getcwd()
files_train+="\\training" #이 스크립트가 있는 경로의 'training'이라는 이름이 있는 폴더 내의 csv 파일을 읽음.
csv_files_train=glob.glob(os.path.join(files_train, "*.csv"))
csv_files_train.sort() #파일 이름 기준으로 알파벳 순으로 정렬. 이걸 이용해 '(파일 이름)_i.csv'는 neural network의 input node,
                        # '(파일 이름)_o.csv'는 neural network의 output node에 입력하는 것과 같은 방식으로 지정할 수 있다.

files_eval=os.getcwd()
files_eval+="\\evaluate" #이 스크립트가 있는 경로의 'evaluate'이라는 이름이 있는 폴더 내의 csv 파일을 읽음.
csv_files_eval=glob.glob(os.path.join(files_eval, "*.csv"))
csv_files_eval.sort()

nn_model=tensorflow.keras.models.Sequential()
nn_model.add(tensorflow.keras.layers.InputLayer(input_shape=block_size*2))
nn_model.add(tensorflow.keras.layers.Dense(units=block_size,activation='relu',kernel_initializer=tensorflow.keras.initializers.he_normal))
nn_model.add(tensorflow.keras.layers.Dense(units=block_size,activation='relu',kernel_initializer=tensorflow.keras.initializers.he_normal))
nn_model.add(tensorflow.keras.layers.Dense(units=block_size*2,activation='linear'))
nn_model.compile(loss=pam_weighted_mse, optimizer=tensorflow.keras.optimizers.SGD(learning_rate=learning_rate_calc,momentum=0.9,nesterov=True), run_eagerly=True)

losssave=LossHistory()

i = 0
while i < len(csv_files_eval):
    with open(csv_files_eval[i],
              'r') as nn_csv:  # As long as the commands are within the 'with' namespace, the csv file will remain open.
        str_coeff = csv.reader(nn_csv, delimiter=',', quoting=csv.QUOTE_NONNUMERIC)  # Reading the csv file.
        tempblock = list(str_coeff)
    j = 0
    while j < len(tempblock):
        if (j-((j >>1)<<1) == 0):
            saveblock = []
            saveblock = tempblock[j]
        else:
            saveblock = saveblock + tempblock[j]
            ieval.append(saveblock)
        j = j + 1
    with open(csv_files_eval[i + 1], 'r') as nn_csv:
        str_coeff = csv.reader(nn_csv, delimiter=',', quoting=csv.QUOTE_NONNUMERIC)
        tempblock = list(str_coeff)
    j = 0
    while j < len(tempblock):
        if (j-((j >>1)<<1) == 0): #if remainder of 2 is zero.
            saveblock = []
            saveblock = tempblock[j]
        else:
            saveblock = saveblock + tempblock[j]
            oeval.append(saveblock)
        j = j + 1
    i = i + 2
i = 0
ievaltemp = numpy.array(ieval) * icoef
oevaltemp = numpy.array(oeval) * icoef

train_count=0
epoch=250
while (train_count<epoch):
    i = 0
    loss_per_epoch_train.append(0)
    while (i<len(csv_files_train)):
        print(csv_files_train[i])
        print(csv_files_train[i+1])
        with open(csv_files_train[i],'r') as nn_csv: #As long as the commands are within the 'with' namespace, the csv file will remain open.
            str_coeff=csv.reader(nn_csv, delimiter=',', quoting=csv.QUOTE_NONNUMERIC) #Reading the csv file.
            tempblock=list(str_coeff) #서로 다른 수의 MDCT coefficient block을 저장하고 있는 csv 파일을
                                     # 순수한 float32로 이루어진 list로만 구성된 하나의 numpy array에 넣기 위한 방법.
        j=0
        while j<len(tempblock):
            if (j-((j >>1)<<1) == 0):
                saveblock=[]
                saveblock=tempblock[j]
            else:
                saveblock=saveblock+tempblock[j]
                inblock.append(saveblock)
            j=j+1
        with open(csv_files_train[i+1],'r') as nn_csv:
            str_coeff=csv.reader(nn_csv, delimiter=',', quoting=csv.QUOTE_NONNUMERIC)
            tempblock=list(str_coeff)
        j=0
        while j<len(tempblock):
            if (j-((j >>1)<<1) == 0):
                saveblock=[]
                saveblock=tempblock[j]
            else:
                saveblock=saveblock+tempblock[j]
                outblock.append(saveblock)
            j=j+1
        itemp = numpy.array(inblock) * icoef
        otemp = numpy.array(outblock) * icoef
        epoch_length+=len(inblock)
        nn_model.fit(itemp,otemp,epochs=1,callbacks=[losssave])
        loss_per_epoch_train[train_count]+=losssave.loss
        itemp=[]
        otemp=[]
        inblock=[]
        outblock=[]
        i=i+2
    loss_per_epoch_train[train_count]/=epoch_length
    print("Training loss (Mean Square Error) at epoch No. ", train_count+1, ": ", loss_per_epoch_train[train_count])
    train_count=train_count+1
    print("Total training block number",epoch_length)
    epoch_length=0
    if (train_count%eval_checknum==1):
         nn_model.evaluate(ievaltemp, oevaltemp)
         loss_per_epoch_eval.append(0)
         loss_per_epoch_eval[(int)(train_count//eval_checknum)]+=losssave.loss
         loss_per_epoch_eval[(int)(train_count // eval_checknum)]/=len(ieval)
         print("Test loss (Mean Square Error) at epoch No. ", train_count, ": ", loss_per_epoch_eval[(int)(train_count / eval_checknum)])

#neural network에서 얻은 MDCT coefficient를 IMDCT 프로그램에서 받아들이는 csv 파일 형식으로 작성해야 한다.
with open('new_nn_coefficient.csv','w+',newline='') as new_coe: #Using option 'w+' creates a new file or clears the existing content of the already existing file.
    new_nn_nodes=csv.writer(new_coe,delimiter=',')             #"newline=''" prevents writing excessive newlines to a csv file.
    for row in node_in_coeff:
        new_nn_nodes.writerow(row)
